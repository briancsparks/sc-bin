
#echo "._functions start"

__mkvenv() {
  if [ -z "$VIRTUAL_ENV" ]; then
      echo "Error: Not in a virtual environment!"
      echo "Would you like me to use your default venv at ~/opt/python/default? (y/n)"
      read -r response
      if [[ "$response" =~ ^[Yy] ]]; then
          ~/opt/python/default/bin/python3 -m venv .venv
      else
          echo "Operation cancelled. Please activate a virtual environment first:"
          echo "  pydef                          # your default environment"
          echo "  source /path/to/venv/bin/activate   # any other environment"
          return 1
      fi
  else
      python3 -m venv .venv
  fi
}

pip() {
  if [ -z "$VIRTUAL_ENV" ]; then
      echo "Error: Not in a virtual environment!"
      echo "Please activate a virtual environment first:"
      echo "  pydef                          # your default environment"
      echo "  source /path/to/venv/bin/activate   # any other environment"
      return 1
  else
      command pip "$@"
  fi
}

function display_info() {
  # TODO: add: git branch | egrep '^\*' | cut -d' ' -f2

  # Simley / Frowny
  local success="$?"

  # Git status
  if git rev-parse --is-inside-work_tree &> /dev/null; then
    local BRANCH="$(git branch | egrep '^\*' | cut -d' ' -f2)"
    if [[ `git status --short | wc -l` -gt 0 ]]; then
      echo -n "[${BRANCH}*] "
    else
      echo -n "[${BRANCH}] "
    fi
  fi

  # Success??   :)  vs  :(
  if [[ $success -eq 0 ]]; then
    #echo ":) "
    echo -e "\033[33m\033[1m:) \033[0m"
  else
    #echo -e "\033[31m================================================================================== :(\033[0m"
    #echo -e "\033[31m:( \033[0m"
    echo -e "\033[31m:( :( :( :( :( :( :( :( :( :( :( :( :( :( :( :( :( :( :( :( :( :( :( :( :( :( :( :( :( :(\033[0m"
  fi
}
export PROMPT_COMMAND=display_info

fingerprint() { ssh-keygen -lf $1 -E md5; }
gam() { git commit -am "$*"; }
gaam() { git add . && git commit -am "$*"; }

refaactoring() { git add . && git commit -am "Refactoring"; }
fixeda() { git add . && git commit -am "Fixed"; }
wipa() { git add . && git commit -am "WIP"; }

findbranch() {
  git branch -a | egrep "$1" | head -1 | cut -d/ -f 3
}

__gitbranch() {
  git branch 2> /dev/null | grep '^\*' | grep -o '[^ ]*$' | tail -1
}

branchname() {
  git branch -a | egrep "$1" | head -1 | cut -d/ -f 3
}

#__mcd() {
#  mkdir -p $1
#  cd $1
#}

glone() {
  git clone git@github.com:Goddard-Technologies-LLC/ReprocessorAlpha ReprocessorAlpha$1
  cd ReprocessorAlpha$1
}

ghuclone() {
  git clone --recurse-submodules "git@github.com:${GH_USER}/$1" "$@"
}

jcat() {
  test -n "$1" && (cat "$1" | jq '.' ; exit)
  test -f 'devbox.json' && (cat devbox.json | jq '.' ; exit)
  test -f 'package.json' && (cat package.json | jq '.' ; exit)
}


#echo "._functions end"

# vim: ft=bash:

