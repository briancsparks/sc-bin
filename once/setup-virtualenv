#!/bin/bash -e

 # For '###A' and the like, follow instructions and remove the leading space.
 ###A one-line description

 ###B longer description
 ###B
 ###B --including
 ###B --flags           And descriptions for a usage statement

script_dir="$( cd "$(dirname "$( readlink -f "${BASH_SOURCE[0]}" )" )" && pwd )"
errcho() { echo "$@" 1>&2; }
die() { errcho "$@"; exit 1; }
ensurecmd() { command -v $1 > /dev/null 2>&1 || die "$1 is required, but is not in PATH."; }
announce() { underline=$(printf "%0.s=" $(seq 1 ${#1})); echo -e "\e[93m\n  $1\n  $underline\n\e[0m"; }

# It is best not to get in the way of Ubuntu, when it comes to Python.
# Let Focal, et. al. have the python they want, and don't install
# anything to it (no pip install into global.)

# Therefore, we have a 'global' development venv in ~/opt/venv, with the ability
# to put per-project ones anywhere, as well as other globals.

# Install whatever Python version(s) we will be using in these venvs.
sudo apt install software-properties-common -y
sudo add-apt-repository ppa:deadsnakes/ppa -y
sudo apt update
sudo apt-get install -y python3-distutils
sudo apt-get install -y python3.12 python3.12-dev
sudo apt-get install -y python3.11 python3.11-dev

# Get the virtualenv 'pyz'
mkdir -p "$HOME/opt/env0"
cd "$HOME/opt"
curl -sL -O 'https://bootstrap.pypa.io/virtualenv.pyz'
python3 virtualenv.pyz -p python3.12 ./env0
./env0/bin/pip install virtualenv

# Make it available to the system
cd
mkdir -p .local/bin
ln -s "$HOME/opt/env0/bin/virtualenv" .local/bin/virtualenv

# Make a development-specific 'global' venv
virtualenv -p python3.12 ~/opt/devenv


