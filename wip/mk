#!/bin/bash

# TODO: smartly do either a workstation make or a device make, which would be a manual make


# Function to check if aurie.out exists and is executable
check_aurie_out() {
    if [ ! -x "./build-workstation/aurie.out" ]; then
        echo "Error: aurie.out not found or not executable"
        echo "Please ensure that the build completed successfully"
        exit 1
    fi
}

# Function to display usage information
usage() {
    echo "Usage: mk [OPTION]"
    echo "Build and run the Aurie project."
    echo
    echo "Options:"
    echo "  (no option)   Just build the project (with make)"
    echo "  r             Build the project and run aurie.out with optional arguments"
    echo "  s             Build the project and run aurie.out with the --smoke-test argument"
    echo "  t             Build the project and run unit tests"
    echo "  clean         Clean the build directory using 'make clean'"
    echo
    echo "Examples:"
    echo "  mk            Build the project"
    echo "  mk r          Build the project and run aurie.out"
    echo "  mk s          Build the project and run smoke tests"
    echo "  mk t          Build the project and run unit tests"
    echo "  mk clean      Clean the build directory"
}

# Check if scripts/workstation-make script exists and is executable
if [ ! -x "scripts/workstation-make" ]; then
    echo "Error: scripts/workstation-make script not found or not executable"
    exit 1
fi

# Check that param is r,s,t, or clean -- usage otherwise
case $1 in
    r|s|t|clean)
      ;;

    "")
      ;;

    *) usage; exit 1
      ;;
esac

# Do 'make' or 'make clean'
case $1 in
    clean) scripts/workstation-make clean; exit $?   ;;
    *)     scripts/workstation-make                  ;;
esac

# Handle different arguments
case $1 in

    # -----------------------------------------
    # Run aurie.out with the original arguments

    r)
      check_aurie_out

      ./build-workstation/aurie.out "$@"
      EXIT_CODE=$?
      if [ $EXIT_CODE -eq 0 ]; then
          echo "Success: aurie.out executed successfully"
      else
          echo "FAILURE!"
          echo "aurie.out failed with exit code: $EXIT_CODE"
          echo "Please check the logs for more details"
      fi
      exit $EXIT_CODE
      ;;


    # ----------------------------------------
    # Run aurie.out with --smoke-test argument

    s)
      check_aurie_out

      ./build-workstation/aurie.out --smoke-test
      EXIT_CODE=$?
      if [ $EXIT_CODE -eq 0 ]; then
          echo ""
          echo "      Success"
          echo ""
          #echo "Success: Smoke test passed"
      else
          echo "FAILURE!"
          echo "Smoke test failed with exit code: $EXIT_CODE"
          echo "Please check the logs for more details"
      fi
      exit $EXIT_CODE
      ;;


    # ----------------------------------------
    # Run unit tests

    t)
      if [ ! -x "./build-workstation/tests/unit_tests" ]; then
          echo "Error: unit_tests not found or not executable"
          echo "Please ensure that the build completed successfully"
          exit 1
      fi

      ./build-workstation/tests/unit_tests
      EXIT_CODE=$?
      if [ $EXIT_CODE -eq 0 ]; then
          echo "Success: Unit tests passed"
      else
          echo "FAILURE!"
          echo "Unit tests failed with exit code: $EXIT_CODE"
          echo "Please check the logs for more details"
      fi
      exit $EXIT_CODE
      ;;

    # ------------------------------------------------
    # Usage

    -h|--help)
      usage
      exit 0
      ;;


esac

